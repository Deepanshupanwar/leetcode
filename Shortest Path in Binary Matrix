class Solution {
public:
    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {
        int ans=0;
        int n=grid.size();
        queue <pair<int,int>> q;
    if(grid[0][0]==1||grid[n-1][n-1]==1)
            return -1;
        q.push({0,0});
        while(!q.empty())
        {
            ans++;
            int size=q.size();
            while(size>0)
            {
                pair<int,int> p=q.front();
                int i=p.first;
                int j=p.second;
                q.pop();
                if(i==n-1&&j==n-1)
                {
                    return ans;
                }
                if(j-1>=0&&grid[i][j-1]==0)
                {
                    grid[i][j-1]=1;
                    q.push({i,j-1});
                }
                if(j+1<n&&grid[i][j+1]==0)
                {
                    grid[i][j+1]=1;
                    q.push({i,j+1});
                }
                if(i-1>=0&&grid[i-1][j]==0)
                {
                    grid[i-1][j]=1;
                    q.push({i-1,j});
                }
                if(i+1<n&&grid[i+1][j]==0)
                {
                    grid[i+1][j]=1;
                    q.push({i+1,j});
                }
                if(j-1>=0&&i-1>=0&&grid[i-1][j-1]==0)
                {
                    grid[i-1][j-1]=1;
                    q.push({i-1,j-1});
                }
                if(j+1<n&&i-1>=0&&grid[i-1][j+1]==0)
                {
                    grid[i-1][j+1]=1;
                    q.push({i-1,j+1});
                }
                if(j-1>=0&&i+1<n&&grid[i+1][j-1]==0)
                {
                    grid[i+1][j-1]=1;
                    q.push({i+1,j-1});
                }
                if(j+1<n&&i+1<n&&grid[i+1][j+1]==0)
                {
                    grid[i+1][j+1]=1;
                    q.push({i+1,j+1});
                }
                size--;
            }
        }
        return -1;
    }
};
