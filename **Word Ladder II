class Solution {
public:
    void dfs(int u, int begin, vector<vector<int>>& pre, vector<int>& rev_path, vector<vector<int>>& rev)
{

	if (u == begin)
	{
	
		rev.push_back(rev_path);
		return ;
	}
	
	for (int v : pre[u])
	{
		rev_path.push_back(v);
		dfs(v, begin, pre, rev_path, rev);
		rev_path.pop_back();
	}
}
    vector<vector<string>> findLadders(string beginWord, string endWord, vector<string>& wordList) {
    wordList.push_back(beginWord);
	int n = wordList.size();
	int m = beginWord.size();
	vector<vector<int>> adj(n);
	int end_idx = -1;

	for (int i = 0; i < n; ++i)
	{
		for (int j = 0; j < i; ++j)
		{
			int diff = 0;
			
			for (int k = 0; k < m; ++k)
				diff += wordList[i][k] != wordList[j][k];
			
			if (diff == 1)
			{
				adj[i].push_back(j);
				adj[j].push_back(i);
			}
		}
		if (wordList[i] == endWord)
			end_idx = i;
	}
	if (end_idx == -1)
		return {};
        vector<int> dst(n);
	vector<vector<int>> pre(n);
	queue<int> que;
	int d = 1;
    int s = 0;
	que.push(n - 1);
	dst[n - 1] = 1;
	while ((s = que.size()))
	{
		++ d;
		
		while (s --)
		{
			auto u = que.front();
			que.pop();
			
			for (auto& v : adj[u])
			{
				if (dst[v] == 0)
				{
					dst[v] = d;
					pre[v].push_back(u);
					que.push(v);
				}
				else if (dst[v] == d)
				{
					pre[v].push_back(u);
				}
			}
		}
	}
	vector<int> rev_path = {end_idx};
	vector<vector<int>> rev;
	dfs(end_idx, n - 1, pre, rev_path, rev);
	vector<vector<string>> ret(rev.size());
	
	for (int i = 0; i < rev.size(); ++i)
		for (int j = rev[i].size() - 1; j >= 0; --j)
			ret[i].push_back(wordList[rev[i][j]]);
	
	return ret;
        
    }
};
