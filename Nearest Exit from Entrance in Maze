class Solution {
public:
    int nearestExit(vector<vector<char>>& maze, vector<int>& entrance) {
        queue<pair<int,int>>q;
        int k=entrance[0];
        int l=entrance[1];
        int m=maze.size();
        int n=maze[0].size();
        q.push({k,l});
        maze[k][l]='+';
        int ans=0;
        while(!q.empty())
        {
            int size=q.size();
            ans++;
            while(size>0)
            {
                pair<int,int> p=q.front();
                int i=p.first;
                int j=p.second;
                q.pop();
                if(j-1>=0&&maze[i][j-1]=='.')
                {
                    if(i==0||i==m-1||j-1==0)
                        return ans;
                    maze[i][j-1]='+';
                    q.push({i,j-1});
                }
                if(j+1<n&&maze[i][j+1]=='.')
                {
                    if(i==0||j+1==n-1||i==m-1)
                        return ans;
                    maze[i][j+1]='+';
                    q.push({i,j+1});
                }
                if(i-1>=0&&maze[i-1][j]=='.')
                {
                    if(i-1==0||j==n-1||j==0)
                        return ans;
                    maze[i-1][j]='+';
                    q.push({i-1,j});
                }
                if(i+1<m&&maze[i+1][j]=='.')
                {
                    if(j==0||j==n-1||i+1==m-1)
                        return ans;
                    maze[i+1][j]='+';
                    q.push({i+1,j});
                }
                size--;
            }
        }
        return -1;
    }
};
