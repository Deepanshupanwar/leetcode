class Solution {
public:
    vector<int> shortestAlternatingPaths(int n, vector<vector<int>>& redEdges, vector<vector<int>>& blueEdges) {
        vector<vector<pair<int,int>>>graph(n);
        for(int i=0;i<redEdges.size();i++)
        {
            graph[redEdges[i][0]].push_back({redEdges[i][1],1});
        }
        for(int i=0;i<blueEdges.size();i++)
        {
            graph[blueEdges[i][0]].push_back({blueEdges[i][1],2});
        }
        vector<int> ansr(n,-1);
        ansr[0]=0;
       
            int ans=0;
            queue <pair<int,int>>q;
            q.push({0,0});
            vector<int>visr(n,0);
            vector<int>visb(n,0);
            visr[0]=1;
            visb[0]=1;
            while(!q.empty())
            {
                ans++;
                int size=q.size();
                while(size>0)
                {
                    int curr=q.front().first;
                    int color=q.front().second;
                    q.pop();
                    for(int j=0;j<graph[curr].size();j++)
                    {
                        pair<int,int> p=graph[curr][j];
                        if(p.second==1)
                        {
                        if(visr[p.first]==0&&color!=p.second)
                        {
                            if(ansr[p.first]==-1||ansr[p.first]>ans)
                            {
                              ansr[p.first]=ans;
                            }
                               visr[p.first]=1;
                            q.push({p.first,p.second});
                        }
                        }
                        else
                        {
                        if(visb[p.first]==0&&color!=p.second)
                        {
                            if(ansr[p.first]==-1||ansr[p.first]>ans)
                            {
                              ansr[p.first]=ans;
                            }
                               visb[p.first]=1;
                            q.push({p.first,p.second});
                        }
                        }
                    }
                    size--;
                }
            }
        return ansr;
    }
};
