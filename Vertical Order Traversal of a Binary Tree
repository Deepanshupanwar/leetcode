/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
   static bool cmp(pair<int,pair<int,int>> &a,pair<int,pair<int,int>> &b)
    {
      auto it1=a.second;
      auto it2=b.second;
      if(it1.second==it2.second)
      {
          if(it1.first==it2.first)
              return a.first<b.first;
          return it1.first<it2.first;
      }
       return it1.second<it2.second;
    }
    void dfs(TreeNode* root,vector<pair<int,pair<int,int>>> &m,int i,int j)
    {
        if(root==NULL)
        {
            return ;    
        }
        m.push_back(make_pair(root->val,make_pair(i,j)));
        dfs(root->left,m,i+1,j-1);
        dfs(root->right,m,i+1,j+1);  
    }
    vector<vector<int>> verticalTraversal(TreeNode* root) {
        vector<pair<int,pair<int,int>>> m;
        dfs(root,m,0,0);
        sort(m.begin(),m.end(),cmp);
        vector <vector<int>> ans;
        int k=1;
        int i=0;
        auto it=m.begin();
        while(it!=m.end())
        {
            ans.resize(k);
            cout<<it->first;
            ans[i].push_back(it->first);
            auto p=it->second;
            int j=p.second;
            it++;
            if(it!=m.end())
            {
            p=it->second;
            while(j==p.second&&it!=m.end())
            {
                cout<<it->first;
                ans[i].push_back(it->first);
                it++;
                if(it!=m.end())
                  p=it->second;
            }
            }
            k++;
            i++;
        }
        return ans;
    }
};
