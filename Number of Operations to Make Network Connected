class Solution {
public:
     void dfs(int start,vector <int>& vis,vector<vector<int>>& graph)
     {
         vis[start]=1;
         for(int i=0;i<graph[start].size();i++)
         {
             if(vis[graph[start][i]]==0)
             {
                 dfs(graph[start][i],vis,graph);
             }
         }
     }
     int makeConnected(int n, vector<vector<int>>& connections)
     {
         if(connections.size()<n-1)
             return -1;
         vector <vector<int>> graph(n);
         for(int i=0;i<connections.size();i++)
         {
             graph[connections[i][0]].push_back(connections[i][1]);
             graph[connections[i][1]].push_back(connections[i][0]);
         }
         int c=0;
         vector <int> vis(n,0);
         for(int i=0;i<n;i++)
         {
             if(vis[i]==0)
             {
                 c++;
                 dfs(i,vis,graph);
             }
         }
         return c-1;
     }
};
