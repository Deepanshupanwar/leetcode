class Solution {
public:
    int help(vector <int> &nums,int ind,vector<int>& dp)
    {
        if(ind>=(nums.size()-1))
           return 0;
        if(dp[ind]!=-1)
          return dp[ind];
        int k=nums[ind];
        int ans=1e7+1;
        for(int i=1;i<=k;i++)
        {
           ans=min(1+help(nums,ind+i,dp),ans);
        }
        return dp[ind]=ans;
    }
    int jump(vector<int>& nums) {
        int n=nums.size();
        vector <int> dp(n,-1);
        return help(nums,0,dp);
    }
};
   /* int jump(vector<int>& nums) {
	int jump_cnt = 0, curLimit = 0, limit = 0;
	for(int i = 0; i < nums.size() - 1; i++) {
		limit = max(limit, i + nums[i]);
		if(i == curLimit){
			jump_cnt++;
			curLimit = limit;
		}
	}
	return jump_cnt;
    }*/
