class Solution {
public:
    bool help(map<string,int> mp,string s,int n,int ws)
    {
        int i=0;
        while(i<n)
        {
            string sub=s.substr(i,ws);
            if(mp[sub]==0)
            {
                return false;
            }
                mp[sub]--;
            i+=ws;
        }
        return true;
    }
    
    vector<int> findSubstring(string s, vector<string>& words) {
        int i=0;
        int n=s.size();
        int sl=words.size()*words[0].size();
        int wordsize=words[0].size();
        vector <int> ans;
        map <string,int> mp;
        for(int i=0;i<words.size();i++)
        {
            if(mp.find(words[i])==mp.end())
            {
                mp.insert({words[i],1});
            }
            else
            {
                mp[words[i]]++;
            }
        }
        while((i+sl)<=n)
        {
            string sub=s.substr(i,sl);
            if(help(mp,sub,sl,wordsize))
            {
                ans.push_back(i);
            }
            i++;
        }
        return ans;
    }
};
