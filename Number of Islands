class Solution {
public:
    void dfs(int start,vector<vector<int>>& graph,vector<int>& vis)
    {
        vis[start]=1;
        for(int i=0;i<graph[start].size();i++)
        {
            if(vis[graph[start][i]]==0)
            {
                dfs(graph[start][i],graph,vis);
            }
        }
    }
    int numIslands(vector<vector<char>>& grid) {
        int n=grid.size();
        int m=grid[0].size();
         vector <vector <int>> graph(n*m);
        for(int i=0;i<grid.size();i++)
        {
            for(int j=0;j<grid[0].size();j++)
            {
                if(grid[i][j]=='1')
                {
                    graph[i*m+j].push_back(i*m+j);
                    if(j<m-1)
                   {
                   if(grid[i][j+1]=='1')
                   {
                        graph[i*m+j].push_back(i*m+j+1);
                        graph[i*m+j+1].push_back(i*m+j);
                   }
                    }
                    if(i<n-1)
                    {
                   if(grid[i+1][j]=='1')
                   {
                        graph[i*m+j].push_back((i+1)*m+j);
                        graph[(i+1)*m+j].push_back(i*m+j);
                   }
                    }
                }
            }
        }
        vector<int> vis(n*m,0);
        int ans=0;
        for(int i=0;i<n*m;i++)
        {
            if(graph[i].size()>0)
            {
                if(vis[i]==0)
                {
                    ans++;
                    dfs(i,graph,vis);
                }
            }
        }
        return ans;
    }
};
