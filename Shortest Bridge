class Solution {
public:
    void dfs1(vector<vector<int>>& grid,int i,int j,vector<vector<int>>& vis,
              queue <pair<int,int>> &q,int n)
    {
        vis[i][j]=1;
        q.push({i,j});
        if(j-1>=0&&grid[i][j-1]==1&&vis[i][j-1]==0)
        {
            dfs1(grid,i,j-1,vis,q,n);
        }
        if(j+1<n&&grid[i][j+1]==1&&vis[i][j+1]==0)
        {
            dfs1(grid,i,j+1,vis,q,n);
        }
        if(i-1>=0&&grid[i-1][j]==1&&vis[i-1][j]==0)
        {
            dfs1(grid,i-1,j,vis,q,n);
        }
        if(i+1<n&&grid[i+1][j]==1&&vis[i+1][j]==0)
        {
            dfs1(grid,i+1,j,vis,q,n);
        }
    }
        
    int shortestBridge(vector<vector<int>>& grid) {
        int n=grid.size();
        queue <pair<int,int>> q;
        vector <vector<int>> vis(n,vector<int>(n,0));
        for(int i=0;i<n;i++)
        {
            int f=0;
            for(int j=0;j<n;j++)
            {
                if(grid[i][j]==1)
                {
                    dfs1(grid,i,j,vis,q,n);
                    f=1;
                    break;
                }
            }
            if(f==1)
                break;
        }
        int ans=0;
        while(!q.empty())
        {
            int size=q.size();
            ans++;
            while(size>0)
            {
                pair<int,int> p=q.front();
                int i=p.first;
                int j=p.second;
                if(j-1>=0&&vis[i][j-1]==0)
                {
                    
                    if(grid[i][j-1]==1)
                        return ans-1;
                    vis[i][j-1]=1;
                    q.push({i,j-1});
                }
                if(j+1<n&&vis[i][j+1]==0)
                {
                    if(grid[i][j+1]==1)
                        return ans-1;
                    vis[i][j+1]=1;
                    q.push({i,j+1});
                }
                if(i-1>=0&&vis[i-1][j]==0)
                {
                    if(grid[i-1][j]==1)
                        return ans-1;
                    vis[i-1][j]=1;
                    q.push({i-1,j});
                }
                if(i+1<n&&vis[i+1][j]==0)
                {
                    if(grid[i+1][j]==1)
                        return ans-1;
                    vis[i+1][j]=1;
                    q.push({i+1,j});
                }
                size--;
                q.pop();
            }
        }
        return -1;
    }
};
