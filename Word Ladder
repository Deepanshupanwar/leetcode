class Solution {
public:
    int ladderLength(string beginWord,string endWord,vector<string>& wordList)
    {
        //map to create graph of string which differ by a single character
        map<string,vector<string>> m;
         for(int i=0;i<wordList.size();i++)
         {
             string str=wordList[i];
             for(int j=0;j<wordList[i].size();j++)
             {
                 string pattern=str.substr(0,j)+"*"+str.substr(j+1,wordList[i].size()-j-1);
                 m[pattern].push_back(str);
             }
         }
          string str=beginWord;
          for(int j=0;j<wordList[0].size();j++)
          {
            string pattern=str.substr(0,j)+"*"+str.substr(j+1,wordList[0].size()-j-1);
            m[pattern].push_back(str);
          }
         //using bfs to find the shortest path
         queue<pair<string,int>>q;
          q.push({beginWord,1});
          set<string> visited;                                                                        visited.insert(beginWord);
        while(!q.empty())
        {
            string str=q.front().first;
            int level=q.front().second;
            q.pop();
            for(int j=0;j<wordList[0].size();j++)
             {
                 string pattern=str.substr(0,j)+"*"+str.substr(j+1,wordList[0].size()-j-1);
                 vector <string> v=m[pattern];
                 for(string x:v)
                 {
                     if(visited.find(x)==visited.end())
                     {
                         q.push({x,level+1});
                         visited.insert(x);
                         if(x==endWord)
                             return level+1;
                     }
                 }
             }
        }
        return 0;                                                                        
    }
};
