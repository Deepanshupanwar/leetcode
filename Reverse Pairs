class Solution {
public:
    int merge(vector<int>& nums,int low,int mid,int high)
    {
        int total=0;
        int j=mid+1;
        for(int i=low;i<=mid;i++)
        {
            while(j<=high && nums[i]>2LL *nums[j])
            {
                j++;
            }
            total+=(j-(mid+1));
        }
        vector<int> temp;
        int i=low;
        j=mid+1;
        while(i<=mid&&j<=high)
        {
            if(nums[i]<=nums[j])
            {
                temp.push_back(nums[i]);
                i++;
            }
            else
            {
                temp.push_back(nums[j]);
                j++;
            }
        }
        while (i <= mid) 
        {
            temp.push_back(nums[i++]);
        }
        while (j <= high)
        {
            temp.push_back(nums[j++]);
        }
        for(int i=low;i<=high;i++)
        {
            nums[i]=temp[i-low];
        }
        return total;
    }
    int mergesort(vector<int>& nums,int low,int high)
    {
        if(low>=high)
            return 0;
        int mid=(high+low)/2;
        int count=mergesort(nums,low,mid);
        count+=mergesort(nums,mid+1,high);
        count+=merge(nums,low,mid,high);
        return count;
    }
    int reversePairs(vector<int>& nums) {
        return mergesort(nums,0,nums.size()-1);
    }
};
