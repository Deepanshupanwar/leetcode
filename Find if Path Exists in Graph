class Solution {
public:
    set<int> visited;
    void dfs(vector<vector<int>>& graph,int start)
    {
        visited.insert(start);
        for(int i=0;i<graph[start].size();i++)
        {
             if(visited.find(graph[start][i])==visited.end())
             {
                dfs(graph,graph[start][i]);           
             }
        }
    }
    bool validPath(int n, vector<vector<int>>& edges, int source, int destination) {
        vector <vector<int>> graph(n);
        for(int i=0;i<edges.size();i++)
        {
            graph[edges[i][0]].push_back(edges[i][1]);
            graph[edges[i][1]].push_back(edges[i][0]);
        }
        dfs(graph,source);
        if(visited.find(destination)==visited.end())
        {
            return false;
        }
        return true;
    }
};
