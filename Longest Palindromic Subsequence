#include<cstring>
class Solution {
public:
    int help(int n,string s,string s1,vector<vector<int>>& dp)
    {
        for(int i=0;i<=n;i++)
        {
          dp[i][0]=0;
          dp[0][i]=0;
        }
        for(int i=1;i<=n;i++)
        {
            for(int j=1;j<=n;j++)
            {
                if(s[i-1]==s1[j-1])
                {
                   dp[i][j]=1+dp[i-1][j-1];
                }
                else
                  dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
            }
        }
        return dp[n][n];
    }
    int longestPalindromeSubseq(string s) {
        int n=s.size();
        string s1="";
        for(int n =s.length()-1; n >= 0; n--)
        {
            s1+=s[n];
        } 
        vector<vector<int>> dp(n+1,vector<int>(n+1,0));
        return help(n,s,s1,dp);
    }
};
