/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<TreeNode*> allPossibleFBT(int n) {
       vector <vector <TreeNode *>>ans;
       if(n%2==0)
         return {};
        ans.push_back({new TreeNode(0)});
        if(n==1)
        {
            return ans[0];
        }
        ans.push_back({new TreeNode(0 ,new TreeNode(0), new TreeNode(0))});
        if(n==3)
        {
            return ans[1];
        }
        int size=(n+1)/2;
        for(int i=2;i<size;i++)
        {
            vector<TreeNode*> trees;
            for(int j=0; j<i; j++)
            {
            for(auto left:ans[j])
            {
                for(auto right:ans[i-j-1])
                {
                    TreeNode *temp = new TreeNode(0);
                    temp->left = left;
                    temp->right = right;
                    trees.push_back(temp);
                }
            }
            }
            ans.push_back(trees);
        }
       return ans[size-1];
     }
};
