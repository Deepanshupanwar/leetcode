class Solution {
public:
    int help(vector<vector<int>>& matrix,int row,int col,vector<vector<int>>& dp)
    {
        int n=matrix.size();
        if(row==n)
        return 0;
        if(dp[row][col]!=-1)
            return dp[row][col];
        int a=INT_MAX,b=INT_MAX,c=INT_MAX;
        if(col>0)
        {
            a=matrix[row][col]+help(matrix,row+1,col-1,dp);
        }
        if(col<n-1)
        {
            b=matrix[row][col]+help(matrix,row+1,col+1,dp);
        }
        c=matrix[row][col]+help(matrix,row+1,col,dp);
        return dp[row][col]= min(a,min(b,c));
    }
    int minFallingPathSum(vector<vector<int>>& matrix) {
        int n=matrix.size();
        vector <vector<int>> dp(n,vector<int> (n,-1));
        int ans=INT_MAX;
        for(int i=0;i<n;i++)
        {
            ans=min(ans,help(matrix,0,i,dp));
        }
        return ans;
    }
};
