/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int preorderindex;
    map <int,int> m;
    TreeNode* help(vector<int>& preorder,int l,int r)
    {
        if(l>r)
            return NULL;
        int curroot=preorder[preorderindex];
        TreeNode *root= new TreeNode({preorder[preorderindex++],NULL,NULL});
        root->left=help(preorder,l,m[curroot]-1);
        root->right=help(preorder,m[curroot]+1,r);
        return root;
    }
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
         preorderindex=0;
         for(int i=0;i<inorder.size();i++)
         {
             m.insert({inorder[i],i});
         }
         TreeNode *ans=help(preorder,0,preorder.size()-1);
         
        return ans;
    }
};
