class Solution {
public:
    void heapify(vector<pair<int,int>>& arr,int i,int n)
    {
        int maxi=i;
        int child1=2*i+1;
        int child2=2*i+2;
        if(child1<n&&arr[child1].second>arr[maxi].second)
        {
            maxi=child1;
        }
        if(child2<n&&arr[child2].second>arr[maxi].second)
        {
            maxi=child2;
        }
        if(maxi!=i)
        {
            swap(arr[i],arr[maxi]);
            heapify(arr,maxi,n);
        }
    }
    void create_heap(vector<pair<int,int>> & arr,int n)
    {
        for(int i=n/2;i>=0;i--)
        {
          heapify(arr,i,n);
        }
    }
    int pop_max(vector<pair<int,int>> &arr,int n)
    {
        int a=arr[0].first;
        swap(arr[0],arr[n-1]);
        arr.pop_back();
        heapify(arr,0,n-1);
        return a;
    }
    vector<int> topKFrequent(vector<int>& nums, int k) {
        vector<pair<int,int>>arr;
        unordered_map<int,int> m;
        for(int i=0;i<nums.size();i++)
        {
            m[nums[i]]++;
        }
        for(auto it:m)
        {
            arr.push_back({it.first,it.second});
        }
        create_heap(arr,arr.size());
        vector<int> ans(k);
        for(int i=1;i<=k;i++)
        {
            ans[i-1]=pop_max(arr,arr.size());
        }
        return ans;
    }
};
